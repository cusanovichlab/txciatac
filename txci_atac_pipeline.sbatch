#!/bin/bash
#SBATCH --job-name=txciatac
#SBATCH --ntasks=72
#SBATCH --ntasks-per-node=72
#SBATCH --nodes=1
#SBATCH --mem-per-cpu=5gb
#SBATCH --time=24:00:00
#SBATCH --partition=standard
#SBATCH --account=uaacount
#SBATCH -o %x.out

echo 'running'

## file need to put on cluster
# bc correct samplesheet in $OUTDIR/samplesheet/
# check bc correct samplesheet before run the command, if there is quotation mark in the samplesheet, you need remove it
# put make_indextable_samplesheet.txt in $OUTDIR/samplesheet/

### run your excutable program with begin and end date and time output
date
OUTDIR=/path/to/outdir
path=/path/to/pkgs
Rscript=/path/to/Rscript

module load samtools/1.10
module load bowtie2/2.4.1

mkdir $OUTDIR/fastqs
mkdir $OUTDIR/fastqs/add_bc
mkdir $OUTDIR/fastqs/bc_correct
mkdir $OUTDIR/bams
mkdir $OUTDIR/samplesheet
mkdir $OUTDIR/reports
mkdir $OUTDIR/scripts
mkdir $OUTDIR/scripts/mk_idx_tb

date
#################################################
#################################################
#
# Add barcodes to the header of fastqs
# and correct barcodes
#
#################################################
#
# append tn5 barcode to index 
# and remove the first 27 bases which are ME (19bp) and tn5 bc (8bo) from reads 2
#
# For correcting barocdes:
# the following script is used for NextSeq which reverse complement idx2 (10x cell bc)
# If analyze data generated by other platforms
# need to remove the -X argument from "scidropatac_fastq_add_correct_barcodes_nextseq.sbatch" script
#
# samples are demultiplexed by P7 sample index + Tn5 barcode
# tn5 barcode should be ordered row-wise in samplesheet
#
#################################################
#
### save samplesheet in $OUTDIR/samplesheet/ ###
#
################################################
# python script written using pyhton 2, so run with sbatch
#############################
# important!!!
# check samplesheet before run the command, if there is quotation mark in the samplesheet, you need remove it
#############################
# if sample mapped to different genome, demultiplex at this step, otherwise not
# bc order in samplesheet: 10x P7 sample indices, tn5 barcodes (row-wise)
# samplesheet example
# sample_id	ranges
# bcfixed	1:1-96

fastq1=$OUTDIR/fastqs/Undetermined_S0_R1_001.fastq.gz
fastq2=$OUTDIR/fastqs/Undetermined_S0_R2_001.fastq.gz
idx1=$OUTDIR/fastqs/Undetermined_S0_I1_001.fastq.gz
idx2=$OUTDIR/fastqs/Undetermined_S0_I2_001.fastq.gz
base=test
samplesheet=$OUTDIR/samplesheet/fixbc_samplesheet.txt

echo 'formating fastqs...'

python $path/scidropatac_add_bc.py \
-1 <(zcat $fastq1) \
-2 <(zcat $fastq2) \
-I1 <(zcat $idx1) \
-I2 <(zcat $idx2) \
-o $OUTDIR/fastqs/add_bc/$base

echo 'correcting barcode...'
pypy $path/scidropatac_barcode_correct.py \
--samplesheet $samplesheet \
-1 <(zcat $OUTDIR/fastqs/add_bc/${base}_R1.fastq.gz) -2 <(zcat $OUTDIR/fastqs/add_bc/${base}_R2.fastq.gz) \
-o $OUTDIR/fastqs/bc_correct/$base \
--stats_out $OUTDIR/reports/${base}_bc.fixed.stats -X

##########################################################
#
# Mapping and deduplication
#
##########################################################
#############################
##EDIT THESE AS NEEDED:
#############################
base=test.bc_correct
fastq1=$OUTDIR/fastqs/bc_correct/${base}_R1.fastq.gz
fastq2=$OUTDIR/fastqs/bc_correct/${base}_R2.fastq.gz
genome_dir=/groups/darrenc/references/bowtie/hg38_mm10/hg38_mm10
adapter_path=$path/Trimmomatic-0.36/adapters
#############################
echo 'trimming adaptors...'
java -Xmx1G -jar $path/Trimmomatic-0.36/trimmomatic-0.36.jar \
PE \
-threads 24 \
$fastq1 $fastq2 \
$OUTDIR/fastqs/${base}_trimmed_R1_paired.fq.gz $OUTDIR/fastqs/${base}_trimmed_R1_unpaired.fq.gz \
$OUTDIR/fastqs/${base}_trimmed_R2_paired.fq.gz $OUTDIR/fastqs/${base}_trimmed_R2_unpaired.fq.gz \
ILLUMINACLIP:$adapter_path/iTSM-PE.fa:2:30:10:1:true LEADING:3 TRAILING:3 SLIDINGWINDOW:4:10 MINLEN:20 \
2> $OUTDIR/reports/${base}_trimmomatic.log;

echo 'mapping reads...'
bowtie2 -p 8 -X 2000 -3 1 -x $genome_dir \
-1 $OUTDIR/fastqs/${base}_trimmed_R1_paired.fq.gz \
-2 $OUTDIR/fastqs/${base}_trimmed_R2_paired.fq.gz \
2> $OUTDIR/reports/${base}.bowtie2.log | samtools view -bS - > $OUTDIR/bams/${base}.bam

echo 'filtering reads...'
samtools view -h -f3 -F12 -q10 $OUTDIR/bams/${base}.bam \
| grep -v '[0-9]'$'\t'hg38chrM | grep -v '[0-9]'$'\t'mm10chrM \
| grep -v '[0-9]'$'\t'GL | grep -v '[0-9]'$'\t'KI | grep -v '[0-9]'$'\t'JH \
| samtools view -Su - | samtools sort -@ 16 -T $OUTDIR/bams/${base}.sorttemp \
-o $OUTDIR/bams/${base}.q10.sort.bam

echo 'deduplicating...'
python $path/sc_atac_true_dedup.py $OUTDIR/bams/${base}.q10.sort.bam $OUTDIR/bams/${base}.q10.sort.dedup.bam

echo 'indexing dedup.bam...'
samtools index $OUTDIR/bams/${base}.q10.sort.dedup.bam

echo 'generating deduplicate counter report...'
python $path/duplicate_counter.py \
-B $OUTDIR/bams/${base}.q10.sort.bam \
-D $OUTDIR/bams/${base}.q10.sort.dedup.bam \
-O $OUTDIR/reports/${base}.deduplicate_counter_results.txt

#####################################
# Demultiplexing
# create all possible indices for each sample that were pooled together
#
#####################################
# Demultiplexing samplesheet example
# base name for ${base}.q10.sort.bam $'\t' sample name $'\t' index (p7:1-737280:tn5)
# e.g. P7_1	celline_postmix	1:1-737280:1-2,13-14,25-26,37-38,49-50,61-62,73-74,85
#
#####################################
# run scidropatac_make_index.table.sbatch
# change the number of jobs in line 10, which is equal to number of lines in make_indextable_samplesheet.txt
# change output dir in line 25
# change the name of samplesheet in line 29 to 31
echo 'Making index table...'
# make index table for demultiplexing
# Variable N is the number of samples that will be generated after demultiplexing (equal to the number of lines in the demultiplexing samplesheet)
N=4
samplesheet=$OUTDIR/samplesheet/make_indextable_samplesheet.txt

sed "2 s/make_index_table/${base}_idxtb/" $path/scidropatac_make_index.tables.sbatch > $OUTDIR/scripts/mk_idx_tb/scidropatac_make_index_${base}.sbatch
sed -i "10 s/N/$N/" $OUTDIR/scripts/mk_idx_tb/scidropatac_make_index_${base}.sbatch
sed -i "25 s~OUTDIR~$OUTDIR~2" $OUTDIR/scripts/mk_idx_tb/scidropatac_make_index_${base}.sbatch
sed -i "26 s~path~$path~2" $OUTDIR/scripts/mk_idx_tb/scidropatac_make_index_${base}.sbatch
sed -i "29 s~samplesheet~$samplesheet~" $OUTDIR/scripts/mk_idx_tb/scidropatac_make_index_${base}.sbatch
sed -i "30 s~samplesheet~$samplesheet~" $OUTDIR/scripts/mk_idx_tb/scidropatac_make_index_${base}.sbatch
sed -i "31 s~samplesheet~$samplesheet~" $OUTDIR/scripts/mk_idx_tb/scidropatac_make_index_${base}.sbatch

# make index table
cd $OUTDIR/scripts/mk_idx_tb/
sbatch scidropatac_make_index_${base}.sbatch

date
echo "waiting for making indextable......"
sleep 5m
echo "counting index tables generated......"
date

x=$(find $OUTDIR/reports/indices_table/*_mk_indextable_log.txt |wc -l)
while [ $x -lt $N ]
do
echo "generated indextable for $x samples"
sleep 15s
x=$(find $OUTDIR/reports/indices_table/*_mk_indextable_log.txt |wc -l)
done

while [ $x == $N ]
do
echo "generated indextable for all samples"
x=$(( $x + 1 ))
done

echo 'combining index table...'

cat $OUTDIR/reports/indices_table/*_indices_table.txt \
>$OUTDIR/reports/${base}.indextable.txt

##########################################
#
# generate barnyard plot
#
##########################################
echo 'Quantifying species-specific mapped reads...'
# # add mm10 before chr for lung peaks
# sed 's/chr/mm10chr/' /groups/darrenc/references/annotations/dnase/mm10/lung/lung_mm10_dnase_peaks_ENCSR000CNM_whitelist.bed \
# | sort -k1,1 -k2,2n -k3,3n >/groups/darrenc/references/annotations/dnase/mm10/lung/barnyard_mm10_lung_dnase_peaks_ENCSR000CNM_whitelist.bed
#barnyard_mm_liver_whitelist=$OUTDIR/peak_ref/barnyard_mm10_liver_all.diet_whitelist.bed

index_table=$OUTDIR/reports/${base}.indextable.txt
hs_peaks=/groups/darrenc/references/annotations/dnase/hg38/barnyard_hg38_lung_dnase.peaks_whitelist.bed
mm_peaks=/groups/darrenc/references/annotations/dnase/mm10/lung/barnyard_mm10_lung_dnase_peaks_ENCSR000CNM_whitelist.bed

date
# generate reads count report, if not install pysam, use "conda config --add channels defaults"; "conda config --add channels conda-forge"; "conda config --add channels bioconda"; "conda install pysam"
# pysam requires "libffi.so.6" so add this line to .bashrc file: export LD_LIBRARY_PATH="/home/u23/haozhang1/miniconda2/envs/atac/lib"
echo 'generating readcounts report...'
python $path/readcounter.py $OUTDIR/bams/${base}.q10.sort.dedup.bam \
$index_table \
$hs_peaks \
$mm_peaks \
$OUTDIR/reports/${base}.readcounts.report.txt

# call cell plots using R, need to install mclust
echo 'calling cells...'
$Rscript $path/sc_atac_twospecies_cellcall_plots.R $OUTDIR/reports/${base}.readcounts 1000

echo 'plotting dedupreport...'
$Rscript $path/sc_atac_dupreport_plotter.R \
$OUTDIR/reports/${base}.deduplicate_counter_results.txt \
$OUTDIR/reports/${base}.readcounts.readdepth.cells.indextable.txt \
$OUTDIR/reports/${base}

echo 'Done barnyard plot'
date
